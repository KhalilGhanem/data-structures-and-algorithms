/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package HashTable;

import org.junit.jupiter.api.Test;

import java.util.ArrayList;

import static org.junit.jupiter.api.Assertions.*;
import static HashTable.App.*;

class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }
    @Test void testAdding(){
      HashTable<String>HT=new HashTable<String>(20);
      HT.add("7","RM");
      assertTrue(HT.contains("7"));
    }
  @Test void testRetrieving(){
    HashTable<String>HT=new HashTable<String>(20);
    HT.add("7","RM");
    HT.add("11","MAN U");
    HT.add("3","PSG");
    HT.add("1","ATM");
    assertEquals("RM",HT.get("7"));
  }
  @Test void testItemNotExist (){
    HashTable<String>HT=new HashTable<String>(20);
    HT.add("7","RM");
    HT.add("11","MAN U");
    HT.add("3","PSG");
    HT.add("1","ATM");
    assertNull(HT.get("600"));
  }
  @Test void testInRangeValue(){
    HashTable<String>HT=new HashTable<String>(20);
//    HT.add(7,"RM");
//    HT.add(11,"MAN U");
//    HT.add(3,"PSG");
//    HT.add(1,"ATM");
  assertEquals(3,HT.hash("1"));
  }
  @Test void testRepeatedWord(){
      String test1="Once upon  a time, there was a brave princess who...";
      String test2="It was a queer, sultry summer , the summer they electrocuted the Rosenbergs";

      assertEquals("a",repeatedWord(test1));
    assertEquals("summer",repeatedWord(test2));

  }

  @Test void  testTreeIntersection(){
    BinaryTree<Integer> firstTree=new BinaryTree(150);
    firstTree.root.left=new Node<Integer>(100);
    firstTree.root.right=new Node<Integer>(250);

    firstTree.root.left.left=new Node<Integer>(75);
    firstTree.root.left.right=new Node<Integer>(160);
    firstTree.root.left.right.left=new Node<Integer>(125);
    firstTree.root.left.right.right=new Node<Integer>(175);

    firstTree.root.right.left=new Node<Integer>(200);
    firstTree.root.right.right=new Node<Integer>(350);
    firstTree.root.right.right.left=new Node<Integer>(300);
    firstTree.root.right.right.right=new Node<Integer>(500);

    //second tree
    BinaryTree<Integer> secondTree=new BinaryTree(42);
    secondTree.root.left=new Node<Integer>(100);
    secondTree.root.right=new Node<Integer>(600);

    secondTree.root.left.left=new Node<Integer>(15);
    secondTree.root.left.right=new Node<Integer>(160);
    secondTree.root.left.right.left=new Node<Integer>(125);
    secondTree.root.left.right.right=new Node<Integer>(175);

    secondTree.root.right.left=new Node<Integer>(200);
    secondTree.root.right.right=new Node<Integer>(350);
    secondTree.root.right.right.left=new Node<Integer>(4);
    secondTree.root.right.right.right=new Node<Integer>(500);

    ArrayList newlist=treeIntersection(firstTree,secondTree);
    ArrayList testArray=new ArrayList();
    testArray.add(100);
    testArray.add(160);
    testArray.add(125);
    testArray.add(175);
    testArray.add(200);
    testArray.add(350);
    testArray.add(500);

    assertEquals(testArray,newlist);
  }

}
