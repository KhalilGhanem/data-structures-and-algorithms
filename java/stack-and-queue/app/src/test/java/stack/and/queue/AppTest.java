/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stack.and.queue;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }
    @Test void testStackPush(){
        Stack<Integer>firstStack=new Stack<Integer>();
        firstStack.push(15);
        assertEquals(15,firstStack.top.value);
    }
    @Test void  testPushMultipleValues(){
      Stack<Integer>firstStack=new Stack<Integer>();
      firstStack.push(15);
      firstStack.push(13);
      firstStack.push(11);
      assertEquals(13,firstStack.top.next.value);
    }
    @Test void testStackPop(){
      Stack<Integer>firstStack=new Stack<Integer>();
      firstStack.push(15);
      firstStack.push(13);
      firstStack.push(11);
      try {
        assertEquals(11,firstStack.pop());
      } catch (Exception e) {
        e.printStackTrace();
      }
    }
    @Test void testStackEmpty(){
      Stack<Integer>firstStack=new Stack<Integer>();
      firstStack.push(15);
      firstStack.push(13);
      firstStack.push(11);
      try {
        firstStack.pop();
        firstStack.pop();
        firstStack.pop();
      } catch (Exception e) {
        e.printStackTrace();
      }
      assertEquals(true,firstStack.isEmpty());
    }
    @Test void testStackPeek(){
      Stack<Integer>firstStack=new Stack<Integer>();
      firstStack.push(15);
      try {
        assertEquals(15,firstStack.peek());
      } catch (Exception e) {
        e.printStackTrace();
      }
    }
    @Test void  testStackIntiEmpty(){
      Stack<Integer>firstStack=new Stack<Integer>();
      assertNull(firstStack.top);
    }
    @Test void  testStackPopEmpty(){
      String msg="";
      Stack<Integer>firstStack=new Stack<Integer>();
      try {
        firstStack.pop();
      } catch (Exception e) {
        msg=e.getMessage();
      }
      assertEquals("The Stack is empty",msg);
    }
    @Test void  testQueueEnqueue(){
      Queue<Integer>firstQueue=new Queue<Integer>();
      firstQueue.enqueue(15);
      assertEquals(15,firstQueue.front.value);
    }
    @Test void  testQueueMultipleEnqueue(){
      Queue<Integer>firstQueue=new Queue<Integer>();
      firstQueue.enqueue(15);
      firstQueue.enqueue(13);
      firstQueue.enqueue(11);
      assertEquals(11,firstQueue.rear.value);
    }
    @Test void testQueueDequeue(){
      Queue<Integer>firstQueue=new Queue<Integer>();
      firstQueue.enqueue(15);
      firstQueue.enqueue(13);
      firstQueue.enqueue(11);
      try {
        assertEquals(15,firstQueue.dequeue());
      } catch (Exception e) {
        e.printStackTrace();
      }
    }
   @Test void testQueuePeek(){
     Queue<Integer>firstQueue=new Queue<Integer>();
     firstQueue.enqueue(15);
     firstQueue.enqueue(13);
     firstQueue.enqueue(11);
     try {
       assertEquals(15,firstQueue.peek());
     } catch (Exception e) {
       e.printStackTrace();
     }
   }
   @Test void testQueueEmpty(){
     Queue<Integer>firstQueue=new Queue<Integer>();
     firstQueue.enqueue(15);
     firstQueue.enqueue(13);
     firstQueue.enqueue(11);
     try {
       firstQueue.dequeue();
       firstQueue.dequeue();
       firstQueue.dequeue();
     } catch (Exception e) {
       e.printStackTrace();
     }
     assertTrue(firstQueue.isEmpty());
   }
   @Test void testQueueInitEmpty(){
    Queue<Integer>firstQueue=new Queue<Integer>();
    assertNull(firstQueue.front);
  }
  @Test void  testEnqueueEmpty(){
    String msg="";
    Queue<Integer>firstQueue=new Queue<Integer>();
    try {
      firstQueue.dequeue();
    } catch (Exception e) {
      msg=e.getMessage();
    }
    assertEquals("The queue is empty",msg);
  }

  // Challenge 11:
  @Test void  testPseudoQueueEmptyEnqueue(){
    PseudoQueue<Integer> firstPQ=new PseudoQueue<Integer>();
    try {
      firstPQ.dequeue();
    } catch (Exception e) {
//      e.getMessage();
      assertEquals("The PseudoQueue is Empty",e.getMessage());
    }

  }
  @Test void testPseudoQueueNonEmptyEnqueue(){
    PseudoQueue<Integer> firstPQ=new PseudoQueue<Integer>();
    firstPQ.enqueue(7);
    firstPQ.enqueue(11);
    firstPQ.enqueue(15);
    try {
      assertEquals(7,firstPQ.dequeue());
    } catch (Exception e) {
      e.printStackTrace();
    }
  }





}
