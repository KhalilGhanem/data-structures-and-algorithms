/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linked.list;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }

    @Test void  testEmptyLinkedList(){
      //  instantiate an empty linked list
      LinkedList list1=new LinkedList();
      assertNull(list1.head,"This method should instantiate an empty linked list ");
    }

    //  Can insert into the linked list
    @Test void  testInsertIntoLinkedList(){
      LinkedList list1=new LinkedList();
      list1.insert(7);
      assertEquals(7,list1.head.value,"This method should insert into the linked list");
    }

    //head will point to the first node
    @Test void testPointToFirst(){
      LinkedList list1=new LinkedList();
      list1.insert(7);
      list1.insert(5);
      list1.insert(9);
      assertEquals(7,list1.head.value,"This method should insure that the head point to the first node in the linked list");
    }

    // insert multiple nodes into the linked list
    @Test void  testMultipleNodes(){
      LinkedList list1=new LinkedList();
      list1.insert(7);
      list1.insert(5);
      assertEquals(5,list1.head.next.value,"This method should insure that the linked list have multiple nodes");
    }

    // finding a value within the linked list that exists
    @Test void  testFindingValue(){
      LinkedList list1=new LinkedList();
      list1.insert(7);
      list1.insert(5);
      list1.insert(9);
      assertTrue(list1.includes(9),"This method should return ture if the value is exists in the linked list");
    }
    // Check if the value is not exists in the Linked List
    @Test void testNotExists(){
      LinkedList list1=new LinkedList();
      list1.insert(7);
      list1.insert(5);
      list1.insert(9);
      assertFalse(list1.includes(99),"This method should return false if the value is not exists in the linked list");
    }
    // Return a collection of all the values that exist in the linked list
    @Test void testallValues(){
      LinkedList list1=new LinkedList();
      list1.insert(7);
      list1.insert(5);
      list1.insert(9);
      assertEquals("{ 7 } -> { 5 } -> { 9 } -> Null",list1.to_string(),"This method should return a collection of all the values");
    }
}
