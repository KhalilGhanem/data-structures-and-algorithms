/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package MergeSort;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());
      System.out.println(5/2);
      int[] test={8,4,23,42,16,15};
      int []test2=mergeSort(test);

      for (int i : test2) {
        System.out.println("M.. "+i);
      }


    }

    public static int [] mergeSort(int[] arr){
      int n= arr.length;;
      if (n>1){
        int mid=n/2;
        int [] left=new int[mid];
        int [] right=new int[n-mid];
        for (int i = 0; i < mid; i++) {
          left[i] = arr[i];
        }
        for (int i = mid; i < n; i++) {
          right[i - mid] = arr[i];
        }
        mergeSort(left);
        mergeSort(right);
        merge(left,right,arr);
      }
      return arr;
    }
  public static void merge(int[]left,int[]right,int[] arr){
      int i=0;
      int j=0;
      int k=0;
      while (i< left.length && j< right.length){
        if (left[i] <=right[j]){
          arr[k]=left[i];
          i++;
        }else {
          arr[k]=right[j];
          j++;
        }
        k++;
        if (i== left.length){
          while (i<left.length){
            arr[k]=arr[i];
            k++;i++;
          }
          while (j< right.length){
            arr[k]=arr[j];
            k++;j++;
          }
        }
      }
  }

}
//  ALGORITHM Mergesort(arr)
//  DECLARE n <-- arr.length
//
//  if n > 1
//  DECLARE mid <-- n/2
//  DECLARE left <-- arr[0...mid]
//  DECLARE right <-- arr[mid...n]
//  // sort the left side
//  Mergesort(left)
//  // sort the right side
//  Mergesort(right)
//  // merge the sorted left and right sides together
//  Merge(left, right, arr)
//
//  ALGORITHM Merge(left, right, arr)
//  DECLARE i <-- 0
//  DECLARE j <-- 0
//  DECLARE k <-- 0
//
//  while i < left.length && j < right.length
//  if left[i] <= right[j]
//  arr[k] <-- left[i]
//  i <-- i + 1
//  else
//  arr[k] <-- right[j]
//  j <-- j + 1
//
//  k <-- k + 1
//
//  if i = left.length
//  set remaining entries in arr to remaining values in right
//  else
//  set remaining entries in arr to remaining values in left
